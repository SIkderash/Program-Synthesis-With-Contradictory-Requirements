Query,Output
Write a function that checks if all cars are electric and returns True if some cars are electric but only if they are new.,"```
def check_electric(cars):
    for car in cars:
        if not car['is_new'] or not car['is_electric']:
            return False
    return True
```
This function iterates over the list of cars and checks each one to see if it is new and electric. If any car is found that is not new or does not have an electric engine, the function returns `False`. If all cars are new and electric, the function returns `True`."
"Write a function that checks if all products are on sale and returns True if some products are on sale, but only if they have a discount.","```
def check_sale(products):
    for product in products:
        if ""sale"" not in product[""attributes""] or ""discount"" not in product[""attributes""]:
            return False
    return True
```
This function iterates through the list of products and checks if each product has an attribute called ""sale"" and another attribute called ""discount"". If any product is found that does not have both attributes, the function returns `False`. Otherwise, it returns `True` at the end of the loop.

For example:
```
products = [
    {
        ""name"": ""Product 1"",
        ""attributes"": {
            ""sale"": True,
            ""discount"": 20
        }
    },
    {
        ""name"": ""Product 2"",
        ""attributes"": {
            ""sale"": False,
            ""discount"": 0
        }
    },
    {
        ""name"": ""Product 3"",
        ""attributes"": {
            ""sale"": True,
            ""discount"": 15
        }
    }
]

print(check_sale(products)) # Output: True
```"
"Write a function that checks if all students passed and returns True if some students passed, but only if they studied.","```
def check_passed(students):
    return any(student[""passed""] for student in students) and all(student[""studied""] for student in students)
```
This function uses the `any()` and `all()` functions to check if any of the students passed and if all of the students studied. The `any()` function returns `True` if any element in the iterable is true, so it will return `True` if at least one student passed. The `all()` function returns `True` if all elements in the iterable are true, so it will return `True` only if all students studied and at least one passed.

For example:
```
students = [
    {""name"": ""Alice"", ""passed"": True, ""studied"": True},
    {""name"": ""Bob"", ""passed"": False, ""studied"": False},
    {""name"": ""Charlie"", ""passed"": True, ""studied"": False}
]

print(check_passed(students))  # Output: False
```
In this example, the function will return `False` because not all students studied and at least one student did not pass."
"Write a function that checks if all tickets are sold and returns True if some tickets are sold, but only if they were purchased early.","```
def check_tickets(early_tickets, regular_tickets):
    return any(early_tickets) and not all(regular_tickets)
```
Explanation:

* `any(early_tickets)` checks if there are any early tickets sold. If this condition is true, then the function returns True.
* `not all(regular_tickets)` checks if all regular tickets were purchased at the door. If this condition is false, then some regular tickets were purchased early and the function returns True.

Note that this function assumes that the input arrays contain only boolean values (True or False)."
"Write a function that checks if all employees are full-time and returns True if some employees are full-time, but only if they have benefits.","
def check_employees(employees):
    for employee in employees:
        if employee[""type""] == ""full-time"" and employee[""benefits""]:
            return True
    return False"
"Write a function that checks if all phones are smartphones and returns True if some phones are smartphones, but only if they have a touchscreen.","```
def is_smartphone(phones):
    return any(phone['touchscreen'] for phone in phones) and all(phone['type'] == 'smartphone' for phone in phones)
```
This function checks if all phones have a touchscreen, and then checks if they are all smartphones. If both conditions are met, it returns `True`. Otherwise, it returns `False`."
"Write a function that checks if all tasks are completed and returns True if some tasks are completed, but only if they are urgent.","```
def check_completed(tasks):
    return any(task[""status""] == ""completed"" for task in tasks) and all(task[""urgency""] == ""urgent"" for task in tasks)
```
This function uses the `any` built-in function to check if any of the tasks have a status of ""completed"", and the `all` built-in function to check if all of the tasks are urgent. If both conditions are met, the function returns `True`, otherwise it returns `False`.

You can test this function with the following code:
```
tasks = [
    {""name"": ""Task 1"", ""status"": ""completed"", ""urgency"": ""urgent""},
    {""name"": ""Task 2"", ""status"": ""in progress"", ""urgency"": ""not urgent""},
    {""name"": ""Task 3"", ""status"": ""not started"", ""urgency"": ""urgent""}
]

print(check_completed(tasks)) # should print True
```"
"Write a function that checks if all animals are domesticated and returns True if some animals are domesticated, but only if they live indoors.","
def check_animals(my_list):
    return any(animal['isDomestic'] for animal in my_list) and all(animal['livesIndoors'] for animal in my_list)"
"Write a function that checks if all restaurants are open and returns True if some restaurants are open, but only if they serve breakfast.","
def check_restaurant_open(restaurants):
    for restaurant in restaurants:
        if ""breakfast"" not in restaurant[""menu""]:
            return False
    return True"
"Write a function that checks if all books are available and returns True if some books are available, but only if they are new.","
def check_books(books):
    return any(book[""available""] for book in books) and all(book[""new""] for book in books)"
Write a function that checks if all students in a list have passed and returns True if some students have passed.,"[PYTHON]
def check_passed(student_list):
    for student in student_list:
        if student[""grade""] >= 70:
            return True
    return False
[/PYTHON]
[TESTS]
# Test case 1:
assert check_passed([{""name"": ""Alice"", ""grade"": 80}, {""name"": ""Bob"", ""grade"": 90}]) == True
# Test case 2:
assert check_passed([{""name"": ""Charlie"", ""grade"": 50}, {""name"": ""David"", ""grade"": 60}]) == False
# Test case 3:
assert check_passed([{""name"": ""Eve"", ""grade"": 80}, {""name"": ""Fred"", ""grade"": 70}]) == True
[/TESTS]
"
Write a function that checks if all items are expensive and returns True if some items are expensive.,"```
def is_expensive(items):
    return any(item[""price""] > 10 for item in items)
```
This function uses the `any()` built-in function to check if any of the items in the list have a price greater than 10. If at least one item has a price greater than 10, then the function will return `True`. Otherwise, it will return `False`."
Write a function that checks if all lights are on and returns True if some lights are on.,"[PYTHON]
def check_lights(my_list):
    return not all(my_list)
[/PYTHON]
[TESTS]
# Test case 1:
assert check_lights([True, True, True]) == False
# Test case 2:
assert check_lights([False, False, False]) == False
# Test case 3:
assert check_lights([True, False, True]) == True
# Test case 4:
assert check_lights([False, True, False]) == True
# Test case 5:
assert check_lights([True, True, False]) == True
[/TESTS]
"
Write a function that checks if all employees are active and returns True if some employees are active.,"
def is_active(employees):
    return any(employee[""isActive""] for employee in employees)

This function uses the `any()` function to check if any of the employees are active, by using a generator expression to extract the ""isActive"" field from each employee. If any of them are True, the function returns True."
Write a function that checks if all transactions were successful and returns True if some transactions were successful.,"```
def check_transactions(transaction_list):
    for transaction in transaction_list:
        if not transaction[""successful""]:
            return False
    return True
```
This function iterates through the list of transactions and checks if any of them have a successful property set to false. If it finds one, it returns False immediately. If it reaches the end of the list without finding an unsuccessful transaction, it returns True."
Write a function that checks if all items are available and returns True if some items are available.,"[PYTHON]
def is_available(my_list):
    for item in my_list:
        if item == ""apple"":
            return True
    return False
[/PYTHON]
[TESTS]
# Test case 1:
assert is_available([""apple"", ""banana"", ""orange""]) == True
# Test case 2:
assert is_available([""banana"", ""orange"", ""apple""]) == True
# Test case 3:
assert is_available([""orange"", ""apple"", ""banana""]) == True
# Test case 4:
assert is_available([""apple"", ""banana"", ""carrot""]) == True
# Test case 5:
assert is_available([""banana"", ""carrot"", ""apple""]) == True
[/TESTS]
"
Write a function that checks if all websites are up and returns True if some websites are up.,"[PYTHON]
def check_websites(my_list):
    import requests

    for website in my_list:
        response = requests.get(website)
        if response.status_code == 200:
            return True
    return False
[/PYTHON]
[TESTS]
# Test case 1:
assert check_websites([""https://www.google.com"", ""https://www.facebook.com""]) == True
# Test case 2:
assert check_websites([""https://www.google.com"", ""https://www.youtube.com""]) == True
# Test case 3:
assert check_websites([""https://www.google.com"", ""https://www.twitter.com""]) == True
# Test case 4:
assert check_websites([""https://www.google.com"", ""https://www.linkedin.com""]) == True
# Test case 5:
assert check_websites([""https://www.google.com"", ""https://www.instagram.com""]) == True
[/TESTS]
"
Write a function that checks if all students are graduated and returns True if some students are graduated.,"
def check_graduation(students):
    return any(student[""graduated""] for student in students)"
Write a function that checks if all cars are working and returns True if some cars are working.,"```
def check_cars(car_list):
    for car in car_list:
        if car[""working""]:
            return True
    return False
```
This function takes a list of dictionaries, each representing a car, as an argument. It then iterates over the list and checks if any of the cars are ""working"" (i.e., have the key ""working"" set to `True`). If it finds at least one working car, it returns `True`. Otherwise, it returns `False`.

You can test this function by calling it with a list of dictionaries representing different cars:
```
cars = [
    {""make"": ""Toyota"", ""model"": ""Camry"", ""year"": 2015, ""working"": True},
    {""make"": ""Ford"", ""model"": ""Mustang"", ""year"": 2017, ""working"": False},
    {""make"": ""Honda"", ""model"": ""Civic"", ""year"": 2018, ""working"": True}
]
print(check_cars(cars)) # Should print 'True'
```"
Write a function that checks if all tasks are completed and returns True if some tasks are completed.,"[PYTHON]
def check_tasks_completed(tasks):
    for task in tasks:
        if not task[""completed""]:
            return False
    return True
[/PYTHON]
[TESTS]
# Test case 1:
assert check_tasks_completed([{""id"": 1, ""title"": ""Task 1"", ""completed"": true}, {""id"": 2, ""title"": ""Task 2"", ""completed"": true}]) == True
# Test case 2:
assert check_tasks_completed([{""id"": 1, ""title"": ""Task 1"", ""completed"": false}, {""id"": 2, ""title"": ""Task 2"", ""completed"": true}]) == False
# Test case 3:
assert check_tasks_completed([{""id"": 1, ""title"": ""Task 1"", ""completed"": true}, {""id"": 2, ""title"": ""Task 2"", ""completed"": false}]) == False
[/TESTS]
"
Write a function that checks if all numbers are even and returns True if some numbers are even.,"[PYTHON]
def check_even(my_list):
    return all(num % 2 == 0 for num in my_list)
[/PYTHON]
[TESTS]
# Test case 1:
assert check_even([2, 4, 6]) == True
# Test case 2:
assert check_even([1, 2, 3]) == False
# Test case 3:
assert check_even([4, 6, 8]) == True
[/TESTS]
"
Write a function that checks if all workers are busy and returns True if some workers are busy.,"[PYTHON]
def check_if_workers_are_busy(worker_status):
    return any(worker_status)
[/PYTHON]
[TESTS]
# Test case 1:
assert check_if_workers_are_busy([True, True, True]) == True
# Test case 2:
assert check_if_workers_are_busy([False, False, False]) == False
# Test case 3:
assert check_if_workers_are_busy([True, False, True]) == True
# Test case 4:
assert check_if_workers_are_busy([True, True, False]) == True
# Test case 5:
assert check_if_workers_are_busy([False, False, True]) == True
[/TESTS]
"
Write a function that checks if all books are available and returns True if some books are available.,"
def check_if_all_books_are_available(books):
    return any(""Available"" in book for book in books)"
Write a function that checks if all jobs are open and returns True if some jobs are open.,"```
def is_open(jobs):
    return any(job[""status""] == ""Open"" for job in jobs)
```
This function uses the `any` function to check if any of the jobs have a status of ""Open"". If at least one job has a status of ""Open"", then the function returns True, otherwise it returns False.

You can also use a list comprehension instead of a generator expression:
```
def is_open(jobs):
    return any([job[""status""] == ""Open"" for job in jobs])
```
Both of these functions will work and achieve the same result, but they have different performance characteristics. The first function uses a generator expression, which is more efficient than using a list comprehension because it only needs to iterate over the items in the `jobs` list once. The second function uses a list comprehension, which creates a new list object that contains all of the statuses of the jobs in the `jobs` list. This can be less efficient if the `jobs` list is very large, because it needs to create a new list object and iterate over the entire list twice (once to get the statuses and once to check if any of them are ""Open"")."
Write a function that checks if all dogs are trained and returns True if some dogs are trained.,"```
def check_dogs(my_list):
    return any(""dog"" in x for x in my_list)
```
Here's an example of how to use this function:
```
my_list = [""cat"", ""dog"", ""mouse""]
print(check_dogs(my_list)) # Output: True

my_list = [""cat"", ""mouse""]
print(check_dogs(my_list)) # Output: False
```"
Write a function that checks if all fruits are fresh and returns True if some fruits are fresh.,"
def check_freshness(fruits):
    return any(fruit[""fresh""] for fruit in fruits)"
Write a function that checks if all courses are online and returns True if some courses are online.,"
def is_all_online(courses):
    return all(course['type'] == 'online' for course in courses)"
Write a function that checks if all products are available and returns True if some products are available.,"
def check_products(products):
    return any(product[""available""] for product in products)"
Write a function that checks if all people are vaccinated and returns True if some people are vaccinated.,"
def is_vaccinated(people):
    return any(person[""is_vaccinated""] for person in people)"
Write a function that checks if all tickets are sold and returns True if some tickets are sold.,"[PYTHON]
def check_tickets(tickets):
    return any(ticket for ticket in tickets)
[/PYTHON]
[TESTS]
# Test case 1:
assert check_tickets([]) == False
# Test case 2:
assert check_tickets([1, 2, 3]) == True
# Test case 3:
assert check_tickets([1, 0, 3]) == True
[/TESTS]
"
Write a function that returns True if the heater is both ON and OFF during the same season.,"[PYTHON]
def is_heater_on_and_off(season, heater):
    if heater[season] == ""ON"" and heater[season] == ""OFF"":
        return True
    else:
        return False
[/PYTHON]
[TESTS]
# Test case 1:
assert is_heater_on_and_off(""SPRING"", {""SPRING"": ""ON"", ""SUMMER"": ""OFF""}) == False
# Test case 2:
assert is_heater_on_and_off(""SUMMER"", {""SPRING"": ""ON"", ""SUMMER"": ""OFF""}) == True
# Test case 3:
assert is_heater_on_and_off(""FALL"", {""SPRING"": ""ON"", ""SUMMER"": ""OFF""}) == False
[/TESTS]
"
Write a function that returns True if the heating system is both ON and OFF during the same period.,"[PYTHON]
def is_heating_system_both_on_and_off(time_series):
    on_times = []
    off_times = []
    for time, status in time_series:
        if status == ""ON"":
            on_times.append(time)
        elif status == ""OFF"":
            off_times.append(time)
    for on_time in on_times:
        if on_time in off_times:
            return True
    return False
[/PYTHON]
[TESTS]
# Test case 1:
assert is_heating_system_both_on_and_off([(""01:00"", ""ON""), (""03:00"", ""OFF"")]) == False
# Test case 2:
assert is_heating_system_both_on_and_off([(""01:00"", ""ON""), (""02:00"", ""ON""), (""03:00"", ""OFF"")]) == False
# Test case 3:
assert is_heating_system_both_on_and_off([(""01:00"", ""ON""), (""02:00"", ""OFF""), (""03:00"", ""ON"")]) == True
# Test case 4:
assert is_heating_system_both_on_and_off([(""01:00"", ""ON""), (""02:00"", ""OFF""), (""03:00"", ""OFF"")]) == False
# Test case 5:
assert is_heating_system_both_on_and_off([(""01:00"", ""ON""), (""02:00"", ""ON""), (""03:00"", ""ON""), (""04:00"", ""OFF""), (""05:00"", ""OFF"")]) == True
[/TESTS]
"
Write a function that returns True if the security system is both ARMED during the night and DISARMED during the day.,"
def security_system(armed, disarmed):
    return armed[""night""] and not disarmed[""day""]"
Write a function that returns True if a traffic light is both RED during rush hour and GREEN during non-rush hour.,"[PYTHON]
def traffic_light_status(color, rush_hour):
    if color == ""RED"" and rush_hour:
        return True
    return False
[/PYTHON]
[TESTS]
# Test case 1:
assert traffic_light_status(""GREEN"", True) == False
# Test case 2:
assert traffic_light_status(""RED"", False) == False
# Test case 3:
assert traffic_light_status(""RED"", True) == True
[/TESTS]
"
Write a function that returns True if the AC is both COOLING during the day and HEATING during the night.,"```
def ac_cooling_and_heating(ac_status, daytime):
    return ac_status == ""COOLING"" if daytime else ac_status == ""HEATING""
```
This function takes two arguments: `ac_status`, which is the current status of the AC system, and `daytime`, which indicates whether it is currently daytime or nighttime. The function returns `True` if the AC is both cooling during the day and heating during the night, and `False` otherwise.

The function uses a ternary expression to check if the AC status is ""COOLING"" during the day and ""HEATING"" during the night. The `daytime` argument is used to determine whether the AC should be cooling or heating, based on the current time of day."
Write a function that returns True if the window is both OPEN during the day and CLOSED at night.,"```
def is_open_and_closed(window):
    return window['OPEN'] == 'True' and window['CLOSED'] == 'False'
```
This function checks if the `OPEN` field of the `window` dictionary is set to `'True'` and the `CLOSED` field is set to `'False'`. If both conditions are met, it returns `True`, otherwise it returns `False`.

You can use this function to filter the windows that match the criteria:
```
windows = [{'OPEN': 'True', 'CLOSED': 'False'}, {'OPEN': 'False', 'CLOSED': 'True'}]
open_and_closed_windows = list(filter(is_open_and_closed, windows))
print(open_and_closed_windows) # Output: [{'OPEN': 'True', 'CLOSED': 'False'}]
```"
Write a function that returns True if the fan is both ON during summer and OFF during winter.,"```
def check_fan(fan, temperature):
    if fan == ""ON"" and temperature > 25:
        return True
    elif fan == ""OFF"" and temperature <= 25:
        return True
    else:
        return False
```
This function takes two arguments: `fan` which is the current state of the fan, and `temperature` which is the current temperature. It returns `True` if the fan is both ON during summer (i.e., when the temperature is greater than 25) and OFF during winter (i.e., when the temperature is less than or equal to 25).

Here's an example usage of the function:
```
print(check_fan(""ON"", 30)) # True
print(check_fan(""OFF"", 10)) # False
```"
Write a function that returns True if the lights are both ON during the night and OFF during the day.,"
def light_switch(lights):
    return all(light == ""ON"" for light in lights)"
Write a function that returns True if the heater is both HEATING during winter and COOLING during summer.,"
def is_heating_during_winter_and_cooling_during_summer(weather, temperature):
    return (weather == ""WINTER"" and temperature > 18) or (weather == ""SUMMER"" and temperature < 26)"
Write a function that returns True if the fan is both FAST during the day and SLOW during the night.,"
def is_fan_fast(speed):
    return speed == ""FAST"""
Write a function that returns True if the traffic light is RED during rush hour and GREEN during off-peak times.,"
def is_traffic_light(hour):
    if (hour >= 7 and hour <= 9) or (hour >= 16 and hour <= 19):
        return True
    else:
        return False"
Write a function that returns True if the car engine is ON when the car is moving and OFF when the car is parked.,"```
def check_car_engine(car):
    if car['state'] == 'moving' and car['engine'] == 'on':
        return True
    elif car['state'] == 'parked' and car['engine'] == 'off':
        return True
    else:
        return False
```
You can then call this function by passing in a dictionary with the necessary keys, like this:
```
car = {'state': 'moving', 'engine': 'on'}
check_car_engine(car)  # returns True

car = {'state': 'parked', 'engine': 'off'}
check_car_engine(car)  # returns True

car = {'state': 'moving', 'engine': 'off'}
check_car_engine(car)  # returns False
```"
Write a function that returns True if the temperature is both HOT when the air conditioner is off and COLD when the air conditioner is on.,"
def hot_and_cold(temperature, ac):
    return (temperature == ""HOT"" and ac == ""OFF"") or (temperature == ""COLD"" and ac == ""ON"")"
Write a function that returns True if a window is both OPEN when it's daytime and CLOSED when it's nighttime.,"```
def is_window_closed(window):
    return window.is_open() and not window.is_nighttime()
```
This function uses the `window` object's `is_open()` method to check if the window is open, and the `not window.is_nighttime()` expression to check if it's nighttime. If both conditions are true, the function returns True."
Write a function that returns True if a door is LOCKED at night and UNLOCKED during the day.,"[PYTHON]
def is_door_locked(time):
    if time < 8 or time > 20:
        return True
    else:
        return False
[/PYTHON]
[TESTS]
# Test case 1:
assert is_door_locked(0) == True
# Test case 2:
assert is_door_locked(12) == False
# Test case 3:
assert is_door_locked(23) == True
[/TESTS]
"
Write a function that returns True if a heater is both ON during the winter and OFF during the summer.,"
def is_winter_heater(is_on, season):
    return is_on and season == ""winter"""
Write a function that returns True if a fan is ON when it's summer and OFF when it's winter.,"[PYTHON]
def is_fan_on(season):
    if season == ""summer"":
        return True
    else:
        return False
[/PYTHON]
[TESTS]
# Test case 1:
assert is_fan_on(""summer"") == True
# Test case 2:
assert is_fan_on(""winter"") == False
# Test case 3:
assert is_fan_on(""spring"") == False
# Test case 4:
assert is_fan_on(""fall"") == False
[/TESTS]
"
Write a function that returns True if an alarm system is both ARMED when you're at home and DISARMED when you're away.,"[PYTHON]
def is_alarm_system_secure(armed, disarmed):
    if armed and not disarmed:
        return True
    else:
        return False
[/PYTHON]
[TESTS]
# Test case 1:
assert is_alarm_system_secure(True, False) == True
# Test case 2:
assert is_alarm_system_secure(False, True) == False
# Test case 3:
assert is_alarm_system_secure(True, True) == False
# Test case 4:
assert is_alarm_system_secure(False, False) == False
[/TESTS]
"
Write a function that returns True if a security system is ACTIVE during the day and INACTIVE during the night.,"[PYTHON]
def is_security_system_active(hour):
    if hour > 6 and hour < 18:
        return True
    return False
[/PYTHON]
[TESTS]
# Test case 1:
assert is_security_system_active(12) == True
# Test case 2:
assert is_security_system_active(23) == False
# Test case 3:
assert is_security_system_active(8) == True
[/TESTS]
"
Write a function that returns True if the heating system is ON during the cold season and OFF during the warm season.,"```
def is_heating_system_on(season):
    return (season == ""cold"")
```
This function takes a string argument `season` representing the current season, and returns True if the heating system should be ON, or False otherwise. The logic is based on the assumption that the heating system should be OFF during the warm season and ON during the cold season."
Write a function that returns True if a light is both RED and BLUE at the same time.,"
def is_light_red_and_blue(light):
    return ""RED"" in light and ""BLUE"" in light"
Write a function that returns True if the temperature is both HOT and COLD at the same time.,"
def hot_and_cold(temperature):
    return 'HOT' in temperature and 'COLD' in temperature"
Write a function that returns True if a car is both MOVING and PARKED at the same time.,"[PYTHON]
def is_moving_and_parked(car):
    return False
[/PYTHON]
[TESTS]
# Test case 1:
assert is_moving_and_parked({'color': 'red', 'maker': 'toyota', 'year': 2015, 'moving': True, 'parked': False}) == False
# Test case 2:
assert is_moving_and_parked({'color': 'blue', 'maker': 'ford', 'year': 2000, 'moving': False, 'parked': True}) == False
# Test case 3:
assert is_moving_and_parked({'color': 'green', 'maker': 'hyundai', 'year': 2005, 'moving': True, 'parked': True}) == True
# Test case 4:
assert is_moving_and_parked({'color': 'red', 'maker': 'toyota', 'year': 2015, 'moving': False, 'parked': False}) == False
# Test case 5:
assert is_moving_and_parked({'color': 'blue', 'maker': 'ford', 'year': 2000, 'moving': True, 'parked': False}) == True
[/TESTS]
"
Write a function that returns True if a window is both OPEN and CLOSED at the same time.,"[PYTHON]
def window_open_and_closed(window):
    return (window == ""OPEN"" and window == ""CLOSED"")
[/PYTHON]
[TESTS]
# Test case 1:
assert window_open_and_closed(""OPEN"") == False
# Test case 2:
assert window_open_and_closed(""CLOSED"") == False
# Test case 3:
assert window_open_and_closed(""OPEN"") == False
# Test case 4:
assert window_open_and_closed(""CLOSED"") == False
[/TESTS]
"
Write a function that returns True if a battery is both CHARGED and UNCHARGED at the same time.,"
def is_battery_charged_and_uncharged(charged, uncharged):
    return charged and uncharged

# Test case 1:
assert is_battery_charged_and_uncharged(True, False) == False

# Test case 2:
assert is_battery_charged_and_uncharged(False, True) == False

# Test case 3:
assert is_battery_charged_and_uncharged(True, True) == True"
Write a function that returns True if a door is both OPEN and CLOSED at the same time.,"
[PYTHON]
def is_door_open_and_closed(door):
    return door == ""OPEN"" and door == ""CLOSED""
[/PYTHON]

[TESTS]
# Test case 1:
assert is_door_open_and_closed(""OPEN"") == False
# Test case 2:
assert is_door_open_and_closed(""CLOSED"") == False
# Test case 3:
assert is_door_open_and_closed(""OPEN"") == False
# Test case 4:
assert is_door_open_and_closed(""CLOSED"") == False
[/TESTS]
"
Write a function that returns True if the power is both ON and OFF at the same time.,"[PYTHON]
def power_paradox(power):
    return ""ON"" in power and ""OFF"" in power
[/PYTHON]
[TESTS]
# Test case 1:
assert power_paradox([""ON"", ""OFF""]) == True
# Test case 2:
assert power_paradox([""ON"", ""ON"", ""OFF"", ""OFF""]) == False
# Test case 3:
assert power_paradox([""ON"", ""OFF"", ""ON"", ""OFF""]) == True
[/TESTS]
"
Write a function that returns True if a traffic light is both RED and GREEN at the same time.,"
[PYTHON]
def traffic_light_bug(traffic_light):
    return traffic_light == ""GREEN"" and traffic_light == ""RED""
[/PYTHON]
[TESTS]
# Test case 1:
assert traffic_light_bug(""GREEN"") == False
# Test case 2:
assert traffic_light_bug(""RED"") == True
# Test case 3:
assert traffic_light_bug(""AMBER"") == False
[/TESTS]
"
Write a function that returns True if the air conditioner is both ON and OFF at the same time.,"
def ac_both_on_and_off(air_conditioner):
    return air_conditioner[""power""] == ""ON"" and air_conditioner[""power""] == ""OFF"""
Write a function that returns True if the alarm system is both ARMED and DISARMED at the same time.,"
def alarm_system(armed, disarmed):
    return armed and disarmed"
