Query,Output
Write a function that checks if all cars are electric and returns True if some cars are electric but only if they are new.,"```
def is_all_electric(cars):
    return all(car.is_new and car.is_electric for car in cars)
```
This function uses a list comprehension to iterate over the `cars` list, checking if each `car` has both the `is_new` and `is_electric` attributes set to `True`. If all of these conditions are met, the function returns `True`, otherwise it returns `False`.

You can also use a for loop instead of a list comprehension:
```
def is_all_electric(cars):
    for car in cars:
        if not (car.is_new and car.is_electric):
            return False
    return True
```"
"Write a function that checks if all products are on sale and returns True if some products are on sale, but only if they have a discount.","
def check_sale(products):
    for product in products:
        if 'discount' in product:
            return True
    return False"
"Write a function that checks if all students passed and returns True if some students passed, but only if they studied.","```
def check_students(students):
    return any(student['passed'] for student in students) and all(student['studied'] for student in students)
```
This function uses the `any` built-in function to check if at least one student passed, and the `all` built-in function to check if all students studied. The `and` operator is used to combine these two conditions.

Here's an example of how you can use this function:
```
students = [
    {'name': 'Alice', 'passed': True, 'studied': True},
    {'name': 'Bob', 'passed': False, 'studied': False},
    {'name': 'Charlie', 'passed': True, 'studied': False}
]

print(check_students(students)) # Output: False
```
In this example, the function returns `False` because not all students studied and at least one student failed."
"Write a function that checks if all tickets are sold and returns True if some tickets are sold, but only if they were purchased early.","```
def check_tickets(tickets):
    return any(ticket[""purchased_early""] for ticket in tickets)
```
This function uses a list comprehension to iterate over the `tickets` dictionary and returns `True` if any of the tickets have the `""purchased_early""` key set to `True`.

Here's an example usage:
```
>>> check_tickets([{""ticket_id"": 1, ""purchased_early"": True}, {""ticket_id"": 2, ""purchased_early"": False}])
True
```"
"Write a function that checks if all employees are full-time and returns True if some employees are full-time, but only if they have benefits.","
def check_full_time(employees):
    for employee in employees:
        if employee[""isFullTime""] == False:
            return False
        elif ""benefits"" not in employee or employee[""benefits""] == None:
            return False
    
    return True"
"Write a function that checks if all phones are smartphones and returns True if some phones are smartphones, but only if they have a touchscreen.","```
def is_smartphone(phones):
    for phone in phones:
        if 'touchscreen' not in phone['features']:
            return False
    return True
```
This function checks if all phones have the feature ""touchscreen"" in their dictionary. If a phone doesn't have this feature, it returns `False`. If all phones have this feature, it returns `True`."
"Write a function that checks if all tasks are completed and returns True if some tasks are completed, but only if they are urgent.","
def check_tasks(tasks):
    return any(task[""urgency""] == ""urgent"" and task[""completed""] for task in tasks)"
"Write a function that checks if all animals are domesticated and returns True if some animals are domesticated, but only if they live indoors.","```
def check_domestication(animals):
    return any(animal[""indoor""] for animal in animals)
```
Explanation:

The `any()` function takes a generator expression as an argument. In this case, the generator expression is `(animal[""indoor""] for animal in animals)`. This generates a sequence of booleans, where each boolean indicates whether the corresponding animal lives indoors. The `any()` function returns `True` if any of these booleans are `True`, and `False` otherwise.

The `check_domestication()` function takes a list of dictionaries as an argument, where each dictionary represents an animal and has the following keys: ""indoor"" (a boolean indicating whether the animal lives indoors), ""domesticated"" (a boolean indicating whether the animal is domesticated). The function returns `True` if any of the animals are both indoor and domesticated, and `False` otherwise.

For example, if we call the function with the following list of dictionaries:
```
animals = [
    {""indoor"": True, ""domesticated"": True},
    {""indoor"": False, ""domesticated"": False},
    {""indoor"": True, ""domesticated"": False}
]
```
The function will return `True`, because one of the animals (the first one) is both indoor and domesticated. If we call the function with a different list of dictionaries, for example:
```
animals = [
    {""indoor"": True, ""domesticated"": False},
    {""indoor"": False, ""domesticated"": False},
    {""indoor"": True, ""domesticated"": False}
]
```
The function will return `False`, because none of the animals are both indoor and domesticated."
"Write a function that checks if all restaurants are open and returns True if some restaurants are open, but only if they serve breakfast.","```
def is_open(restaurants):
    for restaurant in restaurants:
        if ""breakfast"" in restaurant[""services""]:
            return True
    return False
```
This function checks if the `services` key in each restaurant's dictionary contains the string ""breakfast"". If it does, it returns `True`. If it doesn't find any restaurants that serve breakfast, it will return `False`."
"Write a function that checks if all books are available and returns True if some books are available, but only if they are new.","
def check_books(books):
    return any(book['available'] for book in books) and all(book['new'] for book in books)"
Write a function that checks if all students in a list have passed and returns True if some students have passed.,"[PYTHON]
def check_passed(student_list):
    for student in student_list:
        if student[""grade""] >= 70:
            return True
    return False
[/PYTHON]
[TESTS]
# Test case 1:
assert check_passed([{""name"": ""Alice"", ""grade"": 80}, {""name"": ""Bob"", ""grade"": 90}]) == True
# Test case 2:
assert check_passed([{""name"": ""Alice"", ""grade"": 50}, {""name"": ""Bob"", ""grade"": 60}]) == False
# Test case 3:
assert check_passed([{""name"": ""Alice"", ""grade"": 70}, {""name"": ""Bob"", ""grade"": 80}, {""name"": ""Charlie"", ""grade"": 90}]) == True
[/TESTS]
"
Write a function that checks if all items are expensive and returns True if some items are expensive.,"[PYTHON]
def check_expensive_items(my_list):
    return any(item[""price""] > 50 for item in my_list)
[/PYTHON]
[TESTS]
# Test case 1:
assert check_expensive_items([{""name"": ""Item1"", ""price"": 10}, {""name"": ""Item2"", ""price"": 20}, {""name"": ""Item3"", ""price"": 30}]) == True
# Test case 2:
assert check_expensive_items([{""name"": ""Item1"", ""price"": 10}, {""name"": ""Item2"", ""price"": 20}, {""name"": ""Item3"", ""price"": 30}, {""name"": ""Item4"", ""price"": 40}]) == True
# Test case 3:
assert check_expensive_items([{""name"": ""Item1"", ""price"": 10}, {""name"": ""Item2"", ""price"": 20}, {""name"": ""Item3"", ""price"": 30}, {""name"": ""Item4"", ""price"": 40}, {""name"": ""Item5"", ""price"": 50}]) == True
# Test case 4:
assert check_expensive_items([{""name"": ""Item1"", ""price"": 10}, {""name"": ""Item2"", ""price"": 20}, {""name"": ""Item3"", ""price"": 30}, {""name"": ""Item4"", ""price"": 40}, {""name"": ""Item5"", ""price"": 50}, {""name"": ""Item6"", ""price"": 60}]) == True
# Test case 5:
assert check_expensive_items([{""name"": ""Item1"", ""price"": 10}, {""name"": ""Item2"", ""price"": 20}, {""name"": ""Item3"", ""price"": 30}, {""name"": ""Item4"", ""price"": 40}, {""name"": ""Item5"", ""price"": 50}, {""name"": ""Item6"", ""price"": 60}, {""name"": ""Item7"", ""price"": 70}]) == True
[/TESTS]
"
Write a function that checks if all lights are on and returns True if some lights are on.,"[PYTHON]
def check_lights(my_list):
    return not all(my_list)
[/PYTHON]
[TESTS]
# Test case 1:
assert check_lights([True, True, True]) == False
# Test case 2:
assert check_lights([False, False, False]) == False
# Test case 3:
assert check_lights([True, False, True]) == True
# Test case 4:
assert check_lights([False, True, False]) == True
# Test case 5:
assert check_lights([True, True, False]) == True
[/TESTS]
"
Write a function that checks if all employees are active and returns True if some employees are active.,"[PYTHON]
def check_active_employees(my_list):
    return not all(employee[""status""] == ""Active"" for employee in my_list)
[/PYTHON]
[TESTS]
# Test case 1:
assert check_active_employees([{""name"": ""John"", ""age"": 30, ""status"": ""Active""}, {""name"": ""Jane"", ""age"": 25, ""status"": ""Inactive""}]) == False
# Test case 2:
assert check_active_employees([{""name"": ""John"", ""age"": 30, ""status"": ""Active""}, {""name"": ""Jane"", ""age"": 25, ""status"": ""Active""}]) == True
[/TESTS]
"
Write a function that checks if all transactions were successful and returns True if some transactions were successful.,"```
def check_transactions(transactions):
    return any(transaction[""success""] for transaction in transactions)
```
This function uses the `any()` function to check if any of the transactions in the list have a `""success""` key with a truthy value. If at least one transaction has a successful status, the function will return `True`.

Here's an example usage:
```
transactions = [
    {""id"": 1, ""amount"": 100, ""success"": True},
    {""id"": 2, ""amount"": 50, ""success"": False},
    {""id"": 3, ""amount"": 25, ""success"": True}
]

print(check_transactions(transactions)) # Output: True
```"
Write a function that checks if all items are available and returns True if some items are available.,"[PYTHON]
def check_availability(my_list):
    return any(my_list)
[/PYTHON]
[TESTS]
# Test case 1:
assert check_availability([]) == False
# Test case 2:
assert check_availability([1, 2, 3]) == True
# Test case 3:
assert check_availability([1, 2, 0]) == True
[/TESTS]
"
Write a function that checks if all websites are up and returns True if some websites are up.,"
def check_websites(websites):
    for website in websites:
        try:
            response = requests.get(website)
            if response.status_code == 200:
                return True
        except requests.exceptions.RequestException:
            pass
    return False"
Write a function that checks if all students are graduated and returns True if some students are graduated.,"```
def is_graduated(students):
    return any(student[""isGraduated""] for student in students)
```
Explanation:

* The `any()` function returns `True` if any of the elements in the iterable are truthy.
* In this case, we use a list comprehension to generate a list of booleans, where each boolean represents whether or not the corresponding student is graduated.
* We then pass this list to the `any()` function, which returns `True` if any of the elements are truthy (i.e., if there are any students who have been graduated).

For example:
```
students = [
    {""name"": ""Alice"", ""isGraduated"": True},
    {""name"": ""Bob"", ""isGraduated"": False},
    {""name"": ""Charlie"", ""isGraduated"": True}
]

print(is_graduated(students)) # Output: True
```"
Write a function that checks if all cars are working and returns True if some cars are working.,"```
def check_cars(cars):
    return any(car.is_working() for car in cars)
```
This function uses the `any` built-in function to check if at least one car is working. It iterates over the `cars` list and checks if each car's `is_working` method returns `True`. If any car is working, `any` will return `True`, otherwise it will return `False`.

You can also use a list comprehension to filter out the non-working cars:
```
def check_cars(cars):
    return len([car for car in cars if car.is_working()]) > 0
```
This function uses a list comprehension to create a new list of only the working cars, and then checks if the length of this list is greater than zero. If there are any working cars, the length of the list will be greater than zero, so `True` will be returned."
Write a function that checks if all tasks are completed and returns True if some tasks are completed.,"[PYTHON]
def check_tasks_completed(tasks):
    for task in tasks:
        if not task[""completed""]:
            return False
    return True
[/PYTHON]
[TESTS]
# Test case 1:
assert check_tasks_completed([{""id"": 1, ""title"": ""Task 1"", ""completed"": true}, {""id"": 2, ""title"": ""Task 2"", ""completed"": true}]) == True
# Test case 2:
assert check_tasks_completed([{""id"": 1, ""title"": ""Task 1"", ""completed"": false}, {""id"": 2, ""title"": ""Task 2"", ""completed"": true}]) == False
# Test case 3:
assert check_tasks_completed([{""id"": 1, ""title"": ""Task 1"", ""completed"": true}, {""id"": 2, ""title"": ""Task 2"", ""completed"": false}]) == False
[/TESTS]
"
Write a function that checks if all numbers are even and returns True if some numbers are even.,"[PYTHON]
def is_even(my_list):
    return all(num % 2 == 0 for num in my_list)
[/PYTHON]
[TESTS]
# Test case 1:
assert is_even([]) == True
# Test case 2:
assert is_even([1]) == False
# Test case 3:
assert is_even([2, 4, 6]) == True
# Test case 4:
assert is_even([1, 2, 3, 4, 5, 6]) == False
[/TESTS]
"
Write a function that checks if all workers are busy and returns True if some workers are busy.,"[PYTHON]
def check_if_workers_are_busy(workers):
    return any(worker[""status""] == ""Busy"" for worker in workers)
[/PYTHON]
[TESTS]
# Test case 1:
assert check_if_workers_are_busy([{""name"": ""Alice"", ""status"": ""Busy""}, {""name"": ""Bob"", ""status"": ""Idle""}]) == True
# Test case 2:
assert check_if_workers_are_busy([{""name"": ""Alice"", ""status"": ""Idle""}, {""name"": ""Bob"", ""status"": ""Idle""}]) == False
# Test case 3:
assert check_if_workers_are_busy([{""name"": ""Alice"", ""status"": ""Busy""}, {""name"": ""Bob"", ""status"": ""Busy""}]) == True
[/TESTS]
"
Write a function that checks if all books are available and returns True if some books are available.,"```
def check_books(books):
    return any(book[""available""] for book in books)
```
Explanation:

* `any()` is a built-in Python function that takes an iterable (such as a list or tuple) and returns `True` if any of the elements are true. In this case, we are passing a generator expression to `any()`, which generates a sequence of boolean values based on the availability of each book.
* The generator expression is equivalent to `book[""available""] for book in books`, where `books` is the list of books and `book[""available""]` is the availability status of each book.

For example, if we have a list of books with their availability statuses as follows:
```
books = [
    {""title"": ""Book 1"", ""author"": ""Author 1"", ""available"": True},
    {""title"": ""Book 2"", ""author"": ""Author 2"", ""available"": False},
    {""title"": ""Book 3"", ""author"": ""Author 3"", ""available"": True}
]
```
Then, the `check_books(books)` function would return `True`, because at least one book is available."
Write a function that checks if all jobs are open and returns True if some jobs are open.,"[PYTHON]
def check_open_jobs(my_list):
    return any(job == ""Open"" for job in my_list)
[/PYTHON]
[TESTS]
# Test case 1:
assert check_open_jobs([]) == False
# Test case 2:
assert check_open_jobs([""Open""]) == True
# Test case 3:
assert check_open_jobs([""Open"", ""Closed""]) == True
# Test case 4:
assert check_open_jobs([""Closed"", ""Closed""]) == False
[/TESTS]
"
Write a function that checks if all dogs are trained and returns True if some dogs are trained.,"```
def check_dogs(my_list):
    return any(""trained"" in dog for dog in my_list)
```
This function uses the `any()` function to iterate over the list of dogs and check if ""trained"" is in each dog's name. If any dog is trained, it will return `True`, otherwise it will return `False`."
Write a function that checks if all fruits are fresh and returns True if some fruits are fresh.,"```
def check_freshness(fruits):
    return any(""Fresh"" in fruit for fruit in fruits)
```
Explanation:

The `any()` function takes an iterable (such as a list or tuple) and returns `True` if any of the elements are truthy. In this case, we are using a generator expression to check if the string ""Fresh"" is present in each fruit. If any fruit has ""Fresh"" in it, the `any()` function will return `True`.

For example:
```
fruits = [""Apple"", ""Banana"", ""Orange""]
print(check_freshness(fruits))  # Output: False

fruits = [""Apple"", ""Fresh Banana"", ""Orange""]
print(check_freshness(fruits))  # Output: True
```"
Write a function that checks if all courses are online and returns True if some courses are online.,"
def check_online_courses(courses):
    return any(""online"" in course for course in courses)"
Write a function that checks if all products are available and returns True if some products are available.,"```
def check_products(products):
    return any(product for product in products if product[""available""])
```
This function uses the `any` function to iterate over the products and check if any of them have the ""available"" field set to True. If any products are available, it will return True. Otherwise, it will return False."
Write a function that checks if all people are vaccinated and returns True if some people are vaccinated.,"```
def check_vaccination(people):
    return any(person['vaccinated'] for person in people)
```
This function uses the `any` function to iterate over the list of people and check if any of them have been vaccinated. If at least one person has been vaccinated, the function returns `True`, otherwise it returns `False`.

Here's an example usage:
```
people = [
    {'name': 'Alice', 'vaccinated': True},
    {'name': 'Bob', 'vaccinated': False},
    {'name': 'Charlie', 'vaccinated': True}
]

print(check_vaccination(people)) # Output: True
```"
Write a function that checks if all tickets are sold and returns True if some tickets are sold.,"
def check_tickets(tickets):
    return any(ticket for ticket in tickets)"
Write a function that returns True if the heater is both ON and OFF during the same season.,"```
def check_heater(season, heater):
    return (heater['on'][season] and not heater['off'][season]) or (not heater['on'][season] and heater['off'][season])
```
This function takes two arguments: `season` which is a string representing the season, and `heater` which is a dictionary containing the heater's state for each season. The function returns `True` if the heater is both ON and OFF during the same season, and `False` otherwise.

The function uses the logical operators `and`, `or`, and `not` to check the conditions. It first checks if the heater is on during the given season by checking if the corresponding value in the `on` dictionary is `True`. It then checks if the heater is off during the same season by checking if the corresponding value in the `off` dictionary is `False`. If both of these conditions are met, it returns `True`, otherwise it returns `False`."
Write a function that returns True if the heating system is both ON and OFF during the same period.,"
def check_heating(heating_system):
    return any(state == ""ON"" and state == ""OFF"" for state in heating_system)"
Write a function that returns True if the security system is both ARMED during the night and DISARMED during the day.,"```
def security_system(armed, disarmed):
    return armed == 'night' and disarmed == 'day'
```
This function takes two boolean values as input: `armed` for whether the system is armed at night, and `disarmed` for whether it is disarmed during the day. It returns a boolean value indicating whether both conditions are met.

For example, if the security system is armed during the night and disarmed during the day, this function would return `True`. If either condition is not met, it would return `False`."
Write a function that returns True if a traffic light is both RED during rush hour and GREEN during non-rush hour.,"```
def traffic_light(color):
    return color == ""RED""
```"
Write a function that returns True if the AC is both COOLING during the day and HEATING during the night.,"
def is_daytime_cooling(ac_state):
    return ac_state == ""COOLING"" and datetime.now().hour >= 6 and datetime.now().hour < 18"
Write a function that returns True if the window is both OPEN during the day and CLOSED at night.,"[PYTHON]
def is_curtains_closed(window):
    return window == ""OPEN""
[/PYTHON]
[TESTS]
# Test case 1:
assert is_curtains_closed(""CLOSED"") == True
# Test case 2:
assert is_curtains_closed(""OPEN"") == False
[/TESTS]
"
Write a function that returns True if the fan is both ON during summer and OFF during winter.,"```
def check_fan(fan, weather):
    if weather == ""summer"" and fan == ""ON"":
        return True
    elif weather == ""winter"" and fan == ""OFF"":
        return True
    else:
        return False
```
This function takes two arguments: `fan`, which is the current state of the fan, and `weather`, which is the current weather. It checks if the fan is on during summer and off during winter, and returns `True` if both conditions are met. If either condition is not met, it returns `False`."
Write a function that returns True if the lights are both ON during the night and OFF during the day.,"```
def is_night_light(lights):
    return all(l == ""ON"" for l in lights)
```
This function will return `True` if all of the lights are set to ""ON"", and `False` otherwise.

For example, if we pass a list of lights with the following states:
```
lights = [""OFF"", ""ON"", ""OFF""]
```
The function would return `False`, because not all of the lights are set to ""ON"".

If we pass a list of lights with the following states:
```
lights = [""ON"", ""ON"", ""ON""]
```
The function would return `True`, because all of the lights are set to ""ON""."
Write a function that returns True if the heater is both HEATING during winter and COOLING during summer.,"
def heater_check(heater, season):
    if season == ""winter"" and heater == ""HEATING"":
        return True
    elif season == ""summer"" and heater == ""COOLING"":
        return True
    else:
        return False"
Write a function that returns True if the fan is both FAST during the day and SLOW during the night.,"
def check_fan(fan):
    return 'FAST' in fan['day'] and 'SLOW' in fan['night']"
Write a function that returns True if the traffic light is RED during rush hour and GREEN during off-peak times.,"```
def check_traffic_light(hour, peak):
    if (hour >= 8 and hour <= 10) or (hour >= 16 and hour <= 19):
        return True
    else:
        return False
```
This function takes two arguments: `hour` and `peak`. If the current time is between 8am-10am or 4pm-7pm, it will return `True`, indicating that the traffic light is red during rush hour. Otherwise, it will return `False`, indicating that the traffic light is green during off-peak times.

You can use this function to check if the traffic light is red or green based on the current time and whether it's peak or off-peak hours. For example:
```
print(check_traffic_light(10, True))  # Should print 'True'
print(check_traffic_light(16, False))  # Should print 'False'
```"
Write a function that returns True if the car engine is ON when the car is moving and OFF when the car is parked.,"```
def is_car_engine_on(car):
    if car.state == ""moving"":
        return car.engine_status == ""on""
    else:
        return car.engine_status == ""off""
```
This function checks the `state` attribute of the `car` object and returns `True` if the engine is on when the car is moving, and `False` otherwise. The `engine_status` attribute is used to determine whether the engine is on or off."
Write a function that returns True if the temperature is both HOT when the air conditioner is off and COLD when the air conditioner is on.,"```
def is_hot_and_cold(temperature, ac_status):
    return (temperature == ""HOT"" and ac_status == ""OFF"") or (temperature == ""COLD"" and ac_status == ""ON"")
```
This function takes two arguments: `temperature` which is a string representing the temperature, and `ac_status` which is a string representing the status of the air conditioner. The function returns `True` if the temperature is both HOT when the air conditioner is off and COLD when the air conditioner is on, and `False` otherwise.

For example:
```
print(is_hot_and_cold(""HOT"", ""OFF"")) # True
print(is_hot_and_cold(""COLD"", ""ON"")) # True
print(is_hot_and_cold(""WARM"", ""OFF"")) # False
print(is_hot_and_cold(""COOL"", ""ON"")) # False
```"
Write a function that returns True if a window is both OPEN when it's daytime and CLOSED when it's nighttime.,"
def window_status(window):
    return (window == ""OPEN"" and time_of_day() == ""DAYTIME"") or (window == ""CLOSED"" and time_of_day() == ""NIGHTTIME"")"
Write a function that returns True if a door is LOCKED at night and UNLOCKED during the day.,"[PYTHON]
def is_door_locked(time):
    if time < 8 or time > 20:
        return True
    else:
        return False
[/PYTHON]
[TESTS]
# Test case 1:
assert is_door_locked(0) == True
# Test case 2:
assert is_door_locked(12) == False
# Test case 3:
assert is_door_locked(23) == True
# Test case 4:
assert is_door_locked(8) == False
# Test case 5:
assert is_door_locked(10) == False
[/TESTS]
"
Write a function that returns True if a heater is both ON during the winter and OFF during the summer.,"```
def is_valid_heater(heater):
    return heater[""winter""] == ""ON"" and heater[""summer""] == ""OFF""
```
This function takes a dictionary representing a heater as an input, and returns `True` if the heater is both ON during the winter and OFF during the summer. The dictionary should have keys `""winter""` and `""summer""` with values `""ON""` or `""OFF""`."
Write a function that returns True if a fan is ON when it's summer and OFF when it's winter.,"
def is_summer(month):
    return month in range(6, 9)"
Write a function that returns True if an alarm system is both ARMED when you're at home and DISARMED when you're away.,"
def check_alarm(armed, disarmed):
    return armed and not disarmed"
Write a function that returns True if a security system is ACTIVE during the day and INACTIVE during the night.,"[PYTHON]
def is_security_system_active(hour):
    if hour > 6 and hour < 18:
        return True
    else:
        return False
[/PYTHON]
[TESTS]
# Test case 1:
assert is_security_system_active(12) == True
# Test case 2:
assert is_security_system_active(23) == False
# Test case 3:
assert is_security_system_active(8) == True
[/TESTS]
"
Write a function that returns True if the heating system is ON during the cold season and OFF during the warm season.,"```
def heating_system(season):
    if season == ""cold"":
        return True
    else:
        return False
```
This function takes a string representing the current season as input, and returns `True` if the heating system is on during the cold season (i.e., in the winter months), and `False` otherwise."
Write a function that returns True if a light is both RED and BLUE at the same time.,"[PYTHON]
def is_light_both_red_and_blue(light):
    return ""RED"" in light and ""BLUE"" in light
[/PYTHON]
[TESTS]
# Test case 1:
assert is_light_both_red_and_blue([""RED"", ""BLUE""]) == True
# Test case 2:
assert is_light_both_red_and_blue([""RED""]) == False
# Test case 3:
assert is_light_both_red_and_blue([""BLUE""]) == False
# Test case 4:
assert is_light_both_red_and_blue([""RED"", ""GREEN""]) == False
# Test case 5:
assert is_light_both_red_and_blue([]) == False
[/TESTS]
"
Write a function that returns True if the temperature is both HOT and COLD at the same time.,"
def temp_paradox(temperature):
    return ""HOT"" in temperature and ""COLD"" in temperature"
Write a function that returns True if a car is both MOVING and PARKED at the same time.,"
[PYTHON]
def is_moving_and_parked(car):
    return False
[/PYTHON]
[TESTS]
# Test case 1:
assert is_moving_and_parked({'state': 'moving'}) == False
# Test case 2:
assert is_moving_and_parked({'state': 'parked'}) == False
# Test case 3:
assert is_moving_and_parked({'state': 'moving', 'position': 0}) == True
[/TESTS]
"
Write a function that returns True if a window is both OPEN and CLOSED at the same time.,"[PYTHON]
def window_open_and_closed(window):
    return (window == ""OPEN"" and window == ""CLOSED"")
[/PYTHON]
[TESTS]
# Test case 1:
assert window_open_and_closed(""OPEN"") == False
# Test case 2:
assert window_open_and_closed(""CLOSED"") == False
# Test case 3:
assert window_open_and_closed(""OPEN"") == False
# Test case 4:
assert window_open_and_closed(""CLOSED"") == False
[/TESTS]
"
Write a function that returns True if a battery is both CHARGED and UNCHARGED at the same time.,"
def is_battery_contradictory(charged: bool, uncharged: bool) -> bool:
    return charged and uncharged"
Write a function that returns True if a door is both OPEN and CLOSED at the same time.,"[PYTHON]
def is_door_open_and_closed(door):
    return door == ""OPEN"" and door == ""CLOSED""
[/PYTHON]
[TESTS]
# Test case 1:
assert is_door_open_and_closed(""OPEN"") == False
# Test case 2:
assert is_door_open_and_closed(""CLOSED"") == False
# Test case 3:
assert is_door_open_and_closed(""OPEN"") == False
# Test case 4:
assert is_door_open_and_closed(""CLOSED"") == False
[/TESTS]
"
Write a function that returns True if the power is both ON and OFF at the same time.,"[PYTHON]
def power_on_and_off(power):
    return any(item in power for item in [""ON"", ""OFF""])
[/PYTHON]
[TESTS]
# Test case 1:
assert power_on_and_off([""ON"", ""OFF""]) == True
# Test case 2:
assert power_on_and_off([""ON""]) == False
# Test case 3:
assert power_on_and_off([""OFF""]) == False
[/TESTS]
"
Write a function that returns True if a traffic light is both RED and GREEN at the same time.,"[PYTHON]
def traffic_light_bug(traffic_light):
    return False
[/PYTHON]
[TESTS]
# Test case 1:
assert traffic_light_bug((""RED"", ""GREEN"")) == True
# Test case 2:
assert traffic_light_bug((""RED"", ""YELLOW"")) == False
# Test case 3:
assert traffic_light_bug((""RED"", ""RED"")) == False
[/TESTS]
"
Write a function that returns True if the air conditioner is both ON and OFF at the same time.,"
def ac_contradiction(ac):
    return ac[""on""] and not ac[""on""]"
Write a function that returns True if the alarm system is both ARMED and DISARMED at the same time.,"
[PYTHON]
def alarm_system_status(armed, disarmed):
    return armed and disarmed
[/PYTHON]
[TESTS]
# Test case 1:
assert alarm_system_status(True, True) == True
# Test case 2:
assert alarm_system_status(False, False) == False
# Test case 3:
assert alarm_system_status(True, False) == False
# Test case 4:
assert alarm_system_status(False, True) == False
[/TESTS]
"
